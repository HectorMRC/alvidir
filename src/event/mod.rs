#[cfg(feature = "cli")]
pub mod cli;
#[cfg(feature = "in_memory")]
pub mod repository;
pub mod service;

mod error;
pub use error::*;

use crate::{
    entity::Entity,
    id::{Id, Identifiable},
    interval::Interval,
    name::Name,
};
use serde::{Deserialize, Serialize};

/// An Event is a specific happening in which one or more entities are involved.
#[derive(Clone, Serialize, Deserialize)]
pub struct Event<I> {
    #[serde(flatten)]
    id: Id<Self>,
    #[serde(flatten)]
    name: Name<Self>,
    entities: Vec<Id<Entity>>,
    /// the interval is the time during which the event takes place.
    interval: I,
}

impl<I> Identifiable<Event<I>> for Event<I> {
    fn id(&self) -> Id<Self> {
        self.id
    }
}

impl<I> Interval for Event<I>
where
    I: Interval,
{
    type Bound = I::Bound;

    fn lo(&self) -> Self::Bound {
        self.interval.lo()
    }

    fn hi(&self) -> Self::Bound {
        self.interval.hi()
    }
}

impl<I> Event<I> {
    /// Creates an event with an autogenerated id.
    pub fn new(name: Name<Self>, interval: I) -> Self {
        Self {
            id: Id::new(),
            name,
            entities: Default::default(),
            interval,
        }
    }

    /// Creates a new event with the given id.
    pub fn with_id(id: Id<Self>, name: Name<Self>, interval: I) -> Self {
        Self {
            id,
            name,
            entities: Default::default(),
            interval,
        }
    }
}
