#[cfg(feature = "cli")]
pub mod cli;
#[cfg(feature = "in_memory")]
pub mod repository;
pub mod service;

mod error;
pub use error::*;

use crate::{
    id::{Id, Identified},
    interval::{Interval, IntervalST},
    name::Name,
};
use serde::{Deserialize, Serialize};

/// A Period is the time being between two different moments in time.
#[derive(Debug, Default, Clone, PartialEq, Eq, Serialize, Deserialize)]
pub struct Period<B>([B; 2]);

impl<B> Interval for Period<B>
where
    B: Eq + Ord + Copy,
{
    type Bound = B;

    fn lo(&self) -> Self::Bound {
        self.0[0].clone()
    }

    fn hi(&self) -> Self::Bound {
        self.0[1].clone()
    }
}

impl<B> Period<B> {
    /// Builds a new period from the interval between lo and hi.
    pub fn new(lo: B, hi: B) -> Self {
        Self([lo, hi])
    }
}

/// A Timeline is a sequence of overlapping events.
#[derive(Clone, Serialize, Deserialize)]
pub struct Timeline<I>
where
    I: Interval,
{
    id: Id<Timeline<I>>,
    name: Name<Timeline<I>>,
    intervals: IntervalST<I>,
}

impl<I> Identified<Timeline<I>> for Timeline<I>
where
    I: Interval,
{
    fn id(&self) -> Id<Timeline<I>> {
        self.id
    }
}

impl<I> Timeline<I>
where
    I: Interval,
{
    /// Creates a new timeline with the given name and an autogenerated id.
    pub fn new(name: Name<Timeline<I>>) -> Self {
        Self {
            id: Id::new(),
            name,
            intervals: Default::default(),
        }
    }

    /// Creates a new timeline with the given id and name.
    pub fn with_id(id: Id<Timeline<I>>, name: Name<Timeline<I>>) -> Self {
        Self {
            id,
            name,
            intervals: Default::default(),
        }
    }
}
