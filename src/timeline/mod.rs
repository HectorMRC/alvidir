#[cfg(feature = "cli")]
pub mod cli;
#[cfg(feature = "in_memory")]
pub mod repository;
pub mod service;

mod error;
pub use error::*;

use crate::{
    id::{Id, Identified},
    interval::Interval,
    name::Name,
};
use serde::{Deserialize, Serialize};

/// A Moment answers the "when", giving the order of time.
#[derive(Clone, Serialize, Deserialize)]
pub struct Moment {
    id: Id<Moment>,
    /// the position of self in a list of consecutive moments.
    index: usize,
}

impl Eq for Moment {}
impl PartialEq for Moment {
    fn eq(&self, other: &Self) -> bool {
        self.index == other.index
    }
}

impl PartialOrd for Moment {
    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {
        self.index.partial_cmp(&other.index)
    }
}

impl Ord for Moment {
    fn cmp(&self, other: &Self) -> std::cmp::Ordering {
        self.index.cmp(&other.index)
    }
}

impl Moment {
    /// Creates a new moment with an autogenerated id.
    pub fn new() -> Self {
        Self {
            id: Id::new(),
            index: Default::default(),
        }
    }

    /// Creates a new moment with the given id.
    pub fn with_id(id: Id<Moment>) -> Self {
        Self {
            id,
            index: Default::default(),
        }
    }
}

/// A Period is the time being between two different [Moment]s in time. Both included.
#[derive(Clone)]
pub struct Period([Moment; 2]);

impl Interval for Period {
    type Bound = Moment;

    fn lo(&self) -> Self::Bound {
        self.0[0].clone()
    }

    fn hi(&self) -> Self::Bound {
        self.0[1].clone()
    }
}

/// A Timeline is an ordered collection of moments.
#[derive(Serialize, Deserialize, Clone)]
pub struct Timeline {
    id: Id<Timeline>,
    name: Name<Timeline>,
    moments: Vec<Moment>,
}

impl Identified<Timeline> for Timeline {
    fn id(&self) -> Id<Timeline> {
        self.id
    }
}

impl Timeline {
    /// Creates a new timeline with the given name and an autogenerated id.
    pub fn new(name: Name<Timeline>) -> Self {
        Self {
            id: Id::new(),
            name,
            moments: Default::default(),
        }
    }

    /// Creates a new timeline with the given id and name.
    pub fn with_id(id: Id<Timeline>, name: Name<Timeline>) -> Self {
        Self {
            id,
            name,
            moments: Default::default(),
        }
    }
}
